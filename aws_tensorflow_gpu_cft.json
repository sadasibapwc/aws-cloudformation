{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description" : "AWS CloudFormation Template for an Amazon EC2 instance with Tensorflow and NVIDIA.",
	"Parameters" : {

		"KeyName" : {
			"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "Default": "testkey",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."

		},

		"InstanceType" : {
			"Description" : "GPU instance type",
			"Type" : "String",
			"Default" : "g2.2xlarge",
			"AllowedValues" : [	"g2.2xlarge", 
								"g2.8xlarge"],
			"ConstraintDescription" : "Must be a valid EC2 instance type"
		},

		"UbuntuAMIID" : {
			"Type" : "String",
			"Default" : "ami-7abc111a",
			"Description" : "The AMIID of Ubuntu Instance."
		},

		"SSHLocation" : {
      		"Description" : "The IP address range that can be used to SSH to the EC2 instances",
      		"Type" : "String",
      		"MinLength" : "9",
      		"MaxLength" : "18",
      		"Default" : "0.0.0.0/0",
      		"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      		"ConstraintDescription" : "Must be a valid IP CIDR range of the form x.x.x.x/x"
    	},

    	"VolumeSize" : {
      		"Description" : "The size of the EBS volume to attach",
      		"Type" : "Number",
      		"Default" : "10"
    	}
	},

	"Mappings" : {
		"AWSInstanceType2Arch" : {
			"g2.2xlarge"  : { "Arch" : "HVM64"  },
      		"g2.8xlarge"  : { "Arch" : "HVM64"  }
		},

		"AWSRegionArch2AMI" : {
			"us-west-2" : {
				"HVM64" : "ami-7abc111a"
			}
		}
	},

	"Resources" : {

	    "EC2Instance": {
	     	"Type": "AWS::EC2::Instance",
	      	"Properties": {
	        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
	                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
	        "InstanceType"   : { "Ref" : "InstanceType" },
	        "SecurityGroups" : [ {"Ref" : "EC2SecurityGroup"} ],
	        "KeyName"        : { "Ref" : "KeyName" },
	        "BlockDeviceMappings" : [{"DeviceName" : "/dev/sda1", "Ebs" : {"VolumeSize" : "100", "VolumeType" : "gp2"}}],
	    	"UserData": {
	    		"Fn::Base64": { "Fn::Join" : ["", [
					"#!/bin/bash\n",

					"apt-get update && sudo apt-get -y upgrade\n",
					"apt-get -y install linux-headers-$(uname -r) linux-image-extra-`uname -r`\n",
						  
					"wget -qO- https://get.docker.com/ | sh\n",
					  			
					"wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_8.0.44-1_amd64.deb\n",
					"dpkg -i cuda-repo-ubuntu1404_8.0.44-1_amd64.deb\n",
					"rm cuda-repo-ubuntu1404_8.0.44-1_amd64.deb\n",
					"apt-get update\n",
					"apt-get install -y cuda\n",

					"wget http://developer.download.nvidia.com/compute/redist/cudnn/v5.1/cudnn-8.0-linux-x64-v5.1.tgz\n",
					"tar xvzf cudnn-8.0-linux-x64-v5.1.tgz\n",
					"cp cuda/include/cudnn.h /usr/local/cuda/include\n",
					"cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n",
					"chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\n",
					"rm cudnn-8.0-linux-x64-v5.1.tgz\n",
					"rm -rf ~/cuda\n",

					"echo 'export CUDA_HOME=/usr/local/cuda' >> /home/ubuntu/.bashrc\n",
					"echo 'export CUDA_ROOT=/usr/local/cuda' >> /home/ubuntu/.bashrc\n",
					"echo 'export PATH=$PATH:$CUDA_ROOT/bin:$HOME/bin' >> /home/ubuntu/.bashrc\n",
					"echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_ROOT/lib64' >> /home/ubuntu/.bashrc\n",

					"wget http://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh\n",
					"bash Anaconda3-4.2.0-Linux-x86_64.sh -b -p /home/ubuntu/bin/anaconda3\n",
					"rm Anaconda3-4.2.0-Linux-x86_64.sh\n",
					"echo 'export PATH=/home/ubuntu/bin/anaconda3/bin:$PATH' >> /home/ubuntu/.bashrc\n",

					"export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.11.0-cp35-cp35m-linux_x86_64.whl\n",
					"/home/ubuntu/bin/anaconda3/bin/pip install --ignore-installed --upgrade $TF_BINARY_URL\n",

					"source /home/ubuntu/.bashrc\n",
					"exec bash\n",
					"/opt/aws/bin/cfn-init ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource EC2Instance ",
					" --region ", { "Ref" : "AWS::Region" }, "\n"
					]
	    		]}
	    	}}

	    },

	    "EC2SecurityGroup" : {
	      	"Type" : "AWS::EC2::SecurityGroup",
	      	"Properties" : {
	        "GroupDescription" : "Enable HTTP access via port 80",
	        "SecurityGroupIngress" : [
	        	{"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
	          	{"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}]
	      	}
	    }
  	}
}