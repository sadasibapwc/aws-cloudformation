{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description" : "AWS CloudFormation Template for an Amazon EC2 instance with Tensorflow and NVIDIA.",
	"Parameters" : {

		"KeyName" : {
			"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "Default": "testkey",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."

		},

		"InstanceType" : {
			"Description" : "GPU instance type",
			"Type" : "String",
			"Default" : "g2.2xlarge",
			"AllowedValues" : [	"g2.2xlarge", 
								"g2.8xlarge"],
			"ConstraintDescription" : "Must be a valid EC2 instance type"
		},

		"UbuntuAMIID" : {
			"Type" : "String",
			"Default" : "ami-5156fe31",
			"Description" : "The AMIID of Ubuntu Instance."
		},

		"SSHLocation" : {
      		"Description" : "The IP address range that can be used to SSH to the EC2 instances",
      		"Type" : "String",
      		"MinLength" : "9",
      		"MaxLength" : "18",
      		"Default" : "0.0.0.0/0",
      		"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      		"ConstraintDescription" : "Must be a valid IP CIDR range of the form x.x.x.x/x"
    	},

    	"VolumeSize" : {
      		"Description" : "The size of the EBS volume to attach",
      		"Type" : "Number",
      		"Default" : "10"
    	}
	},

	"Mappings" : {
		"AWSInstanceType2Arch" : {
			"g2.2xlarge"  : { "Arch" : "HVM64"  },
      		"g2.8xlarge"  : { "Arch" : "HVM64"  }
		},

		"AWSRegionArch2AMI" : {
			"us-west-2" : {
				"HVM64" : "ami-5156fe31"
			}
		}
	},

	"Resources" : {

	    "EC2Instance": {
	     	"Type": "AWS::EC2::Instance",
	      	"Properties": {
	        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
	                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
	        "InstanceType"   : { "Ref" : "InstanceType" },
	        "SecurityGroups" : [ {"Ref" : "EC2SecurityGroup"} ],
	        "KeyName"        : { "Ref" : "KeyName" },
	        "BlockDeviceMappings" : [{"DeviceName" : "/dev/sda1", "Ebs" : {"VolumeSize" : "100", "VolumeType" : "gp2"}}],
	    	"UserData": {
	    		"Fn::Base64": { "Fn::Join" : ["", [
					"#!/bin/bash\n",

					"sudo add-apt-repository -y ppa:graphics-drivers/ppa\n",
					"sudo apt-get update\n",
					"sudo apt-get install -y dkms\n",
					"sudo apt-get install -y linux-headers-generic\n",
					"sudo apt-get install -y nvidia-367\n",
					"echo blacklist nouveau | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf\n",
					"echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf\n",

					"sudo update-initramfs -u\n",
					"sudo apt-get install -y nvidia-modprobe\n",

					"sudo apt-get update\n",
					"sudo curl -fsSL https://get.docker.com/ | sh\n",
					"sudo curl -fsSL https://get.docker.com/gpg | sudo apt-key add -\n",
					"sudo usermod -aG docker ubuntu\n",
					
					"wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb\n",
					"sudo dpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb\n",

					"/opt/aws/bin/cfn-init ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource EC2Instance ",
					" --region ", { "Ref" : "AWS::Region" }, "\n"
					]
	    		]}
	    	}}

	    },

	    "EC2SecurityGroup" : {
	      	"Type" : "AWS::EC2::SecurityGroup",
	      	"Properties" : {
	        "GroupDescription" : "Enable HTTP access via port 80",
	        "SecurityGroupIngress" : [
	        	{"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
	          	{"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}]
	      	}
	    }
  	}
}